---
- hosts: localhost
  gather_facts: no
  module_defaults:
   group/aws:
    region: "us-east-1"
  tasks:
   - name: Create VPC
     ec2_vpc_net:
      name: Module5
      cidr_block: 10.0.0.0/16
      state: present
     register: vpc
   - name: Create public subnet
     ec2_vpc_subnet:
      vpc_id: "{{ vpc.vpc.id }}"
      tags:
       Name: Module5 public updated subnet
       Module: 5
      cidr: 10.0.1.0/24
      az: "us-east-1a"
      state: present
     register: public_subnet
   - name: Create private subnet1 udpated subnet
     ec2_vpc_subnet:
      vpc_id: "{{ vpc.vpc.id }}"
      tags:
       Name: Module5 private1
       Module: 5
      cidr: 10.0.2.0/24
      az: "us-east-1a"
      state: present
     register: private_subnet_1
   - name: Create private subnet2 updated subnet
     ec2_vpc_subnet:
      vpc_id: "{{ vpc.vpc.id }}"
      tags:
       Name: Module5 private2
       Module: 5
      cidr: 10.0.3.0/24
      az: "us-east-1b"
      state: present
     register: private_subnet_2
   - name: Create internet gateway
     ec2_vpc_igw:
      vpc_id: "{{ vpc.vpc.id }}"
      tags:
       Name: Module5 gateway
       state: present
     register: igw
   - name: Create public route table
     ec2_vpc_route_table:
      vpc_id: "{{ vpc.vpc.id }}"
      tags:
       Name: Module5 public
      subnets: 
       - "{{ public_subnet.subnet.id }}"
      routes:
       - dest: 0.0.0.0/0
         gateway_id: "{{ igw.gateway_id }}"
      state: present
     register: public_route_tbl  
   - name: Create securiy group not used postgres tag
     ec2_group:
      name: Module5_updated_tag_sg
      description: Instances tagged with this group can contact user services
      vpc_id: "{{ vpc.vpc.id }}"
      state: present
     register: pgs_tag_sg
   - name: Create security group postgres
     ec2_group:
      name: Module5_postgresIn_sg
      description: Allows connections to user service from tagged machines
      vpc_id: "{{ vpc.vpc.id }}"
      rules:
       - proto: tcp
         ports:
          - 5432
         group_id: "{{ pgs_tag_sg.group_id }}"
         rule_desc: Allow inbound traffic to port 5432
       - proto: tcp
         ports:
          - 5432
         cidr_ip: 0.0.0.0/0
         rule_desc: Allow access to db
      rules_egress:
       - proto: all
         to_port: 1
         from_port: 65535
         cidr_ip: 0.0.0.0/0
         rule_desc: Allow all outbound traffic
      state: present
     register: postgres_sg
   - name: Create security group postgres_tag 
     ec2_group:
      name: Module5_postgresOut_sg
      description: Instances tagged with this group can contact user services
      vpc_id: "{{ vpc.vpc.id }}"
      rules_egress:
       - proto: tcp
         ports: 
          - 5432
         group_id: "{{ postgres_sg.group_id }}"
      state: present
     register: postgres_tag_sg
   - name: Create dev security group
     ec2_group:
      name: Module5_dev_sg
      description: Development security group access
      vpc_id: "{{ vpc.vpc.id }}"
      rules:
       - proto: tcp
         ports: 
          - 22
         cidr_ip: 0.0.0.0/0
         rule_desc: Allow all inbound SSH traffic
       - proto: tcp
         ports: 
          - 80
         cidr_ip: 0.0.0.0/0
         rule_desc: Allow all inbound HTTP traffic
       - proto: tcp 
         ports:
          - 443
         cidr_ip: 0.0.0.0/0
         rule_desc: Allow all inbound HTTPS traffic   
      rules_egress:
       - proto: tcp
         ports:
          - 80
         cidr_ip: 0.0.0.0/0
         rule_desc: Allow all outbound HTTP traffic
       - proto: tcp
         ports: 
          - 443
         cidr_ip: 0.0.0.0/0
         rule_desc: Allow all outbound HTTPS traffic
      state: present
     register: dev_sg
   - name: Create NAT gateway
     ec2_vpc_nat_gateway:
      subnet_id: "{{ public_subnet.subnet.id }}"
      if_exist_do_not_create: yes
      state: present
     register: nat_gtwy
   - name: Create private route table
     ec2_vpc_route_table:
      vpc_id: "{{ vpc.vpc.id }}"
      tags:
       Name: Module5 private route tbl
      subnets: 
       - "{{ private_subnet_1.subnet.id}}"
       - "{{ private_subnet_2.subnet.id}}"
      routes: 
       - dest: 0.0.0.0/0
         gateway_id: "{{nat_gtwy.nat_gateway_id}}"
      state: present
     register: private_route_tbl
   - name: Create public network ACL
     ec2_vpc_nacl:
      name: public_acl_updated
      vpc_id: "{{ vpc.vpc.id }}"
      subnets:
       - "{{ public_subnet.subnet.id }}"
      tags:
       Name: public acl
      ingress:
       - [120, 'tcp', 'allow', '0.0.0.0/0', null, null, 22, 22]
       - [200, 'tcp', 'allow', '0.0.0.0/0', null, null, 80, 80]
       - [300, 'tcp', 'allow', '0.0.0.0/0', null, null, 443, 443]
       - [900, 'tcp', 'allow', '0.0.0.0/0', null, null, 1024, 65535]
      egress:
       - [300, 'tcp', 'allow', '0.0.0.0/0', null, null, 443, 443]
       - [900, 'tcp', 'allow', '0.0.0.0/0', null, null, 1024, 65535]
      state: present
   - name: Create private network ACL
     ec2_vpc_nacl:
      name: private_acl_updated
      vpc_id: "{{ vpc.vpc.id }}"
      subnets:
       - "{{ private_subnet_1.subnet.id }}"
       - "{{ private_subnet_2.subnet.id }}"
      tags: 
       Name: private acl
      ingress: 
       - [100, 'tcp', 'allow', '10.0.0.0/16', null, null, 5432,5432]
      egress: 
       - [900, 'tcp', 'allow', '0.0.0.0/0', null, null, 1024, 65535]
      state: present
  # - name: Create endpoint
    # ec2_vpc_endpoint:
     # service: com.amazonaws.us-east-1.secretsmanager
     # vpc_id: "{{vpc.vpc.id }}"
     # tags:
      # Name: secrets_manager_endpoint
     # vpc_endpoint_type: Interface
     # vpc_endpoint_subnets:
      # - "{{public_subnet.subnet.id}}"
      # - "{{private_subnet_2.subnet.id}}"
      #state: present
